@page "/post/{id}"
@using Pomelo.Marked
@inject IJSRuntime JsRuntime
@inject ApiClient API
@inject IdentityContainer ID
@inject AppState State

@if (post != null)
{
    <div id="main-wrapper">
        <div class="main section" id="main">
            <div class="widget Blog" data-version="1" id="Blog1">
                <div class="blog-posts hfeed">
                    <PostMainBody PostModel="@post" />
                </div>

                <div id="lstComments" class="comments">
                    <a name="comments"></a>
                    <h4> @count comments: </h4>
                    <div class="comments-content">
                        <div id="comment-holder">
                            <div class="comment-thread toplevel-thread">
                                @if (comments != null)
                                {
                                    <ol id="top-ra">
                                        @foreach (var x in comments)
                                        {
                                            <li class="comment">
                                                <div>
                                                    <div class="avatar-image-container">
                                                        <img src="@x.AvatarUrl" alt="" />
                                                    </div>
                                                    <div class="comment-block">
                                                        <div class="comment-header">
                                                            <cite class="user">
                                                                @if (x.IsOwner)
                                                                {
                                                                    <span class="author">Author</span>
                                                                }
                                                                @x.Name
                                                            </cite>
                                                            <span class="icon user"></span>
                                                            <span class="datetime secondary-text">@x.Time.ToString("MMM dd yyyy HH:mm")</span>
                                                        </div>
                                                        <div>
                                                            @((MarkupString)x.Content)
                                                        </div>
                                                        <span class="comment-actions secondary-text">
                                                            <a class="comment-reply" onclick="@(() => SetCommentScope(false, x.Id))"><i class="fa fa-comment"></i></a>
                                                        </span>
                                                        @if (ID.IsAuthenticated)
                                                        {
                                                            <span class="comment-actions secondary-text" onclick="@(() => DeleteCommentAsync(@x.Id))">
                                                                <a class="comment-reply"><i class="fa fa-trash"></i></a>
                                                            </span>
                                                        }
                                                    </div>
                                                    <div style="margin-top:55px; padding-left:85px;" id="comment-@x.Id"></div>
                                                </div>
                                                @if (x.InnerComments != null && x.InnerComments.Count() > 0)
                                                {
                                                    <div class="comment-replies">
                                                        <div class="comment-thread inline-thread">
                                                            <span class="thread-toggle thread-expanded"><span class="thread-arrow"></span><span class="thread-count">Replies</span></span>
                                                            <ol class="thread-chrome thread-expanded">
                                                                <div>
                                                                    @foreach (var y in x.InnerComments)
                                                                    {
                                                                        <li class="comment">
                                                                            <div class="avatar-image-container">
                                                                                <img src="@y.AvatarUrl" alt="" />
                                                                            </div>
                                                                            <div class="comment-block">
                                                                                <div class="comment-header">
                                                                                    <cite class="user">
                                                                                        @if (y.IsOwner)
                                                                                        {
                                                                                            <span class="author">Author</span>
                                                                                        }
                                                                                        @y.Name
                                                                                    </cite>
                                                                                    <span class="icon user "></span>
                                                                                    <span class="datetime secondary-text">@y.Time.ToString("MMM dd yyyy HH:mm")</span>
                                                                                </div>
                                                                                <div>
                                                                                    @((MarkupString)y.Content)
                                                                                </div>
                                                                                @if (ID.IsAuthenticated)
                                                                                {
                                                                                    <span class="comment-actions secondary-text" onclick="@(() => DeleteCommentAsync(@y.Id))">
                                                                                        <a class="comment-reply"><i class="fa fa-trash"></i></a>
                                                                                    </span>
                                                                                }
                                                                            </div>
                                                                        </li>
                                                                    }
                                                                </div>
                                                            </ol>
                                                        </div>
                                                    </div>
                                                }
                                            </li>
                                        }
                                    </ol>
                                }
                                <div id="top-continue" class="continue">
                                    <a class="comment-reply link" target="_self" onclick="@(() => SetCommentScope())">Add comment</a>
                                    <div id="comment-box">
                                        @if (!ID.IsAuthenticated)
                                        {
                                            <div>
                                                <input bind="@nickname" type="text" class="textbox" placeholder="Nickname" />
                                                <input bind="@email" type="email" class="textbox" placeholder="Email" />
                                            </div>
                                        }
                                        <MarkdownEditor content="" id="txtContent" />
                                        <div style="margin-top: 15px">
                                            <a class="button" onclick="@PostCommentAsync">Add comment</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@functions
{
    int count = 0;
    Guid commentId;
    bool isRoot = true;
    string nickname;
    string email;
    PostViewModel post;
    IEnumerable<CommentViewModel> comments;

    [Parameter] string id { get; set; }

    protected override async Task OnInitAsync()
    {
        post = await API.GetPostAsync(id);
        SetCommentScope();
        await LoadCommentsAsync();
        State.OnStateChanged += () => { StateHasChanged(); };
    }

    protected override async Task OnAfterRenderAsync()
    {
        await HighlightAsync();
    }

    private async Task DeleteCommentAsync(Guid id)
    {
        await API.DeleteCommentAsync(id);
        await LoadCommentsAsync();
        StateHasChanged();
    }

    private async Task LoadCommentsAsync()
    {
        comments = await RenderCommentsMarkdownAsync(await API.GetCommentsAsync(post.Id));
        count = CountComment(comments);
    }

    private void SetCommentScope(bool isRoot = true, Guid id = default)
    {
        this.isRoot = isRoot;

        if (isRoot)
        {
            MoveCommentBoxAsync();
            commentId = post.Id;
        }
        else
        {
            MoveCommentBoxAsync(id);
            commentId = id;
        }
    }

    private async Task PostCommentAsync()
    {
        await API.PutCommentAsync(
            commentId, await GetEditorValueAsync("txtContent"),
            nickname, email, isRoot);
        ClearEditorValueAsync("txtContent");
        await LoadCommentsAsync();
        StateHasChanged();
        await ScrollToElementAsync("lstComments");
    }

    private async Task ScrollToElementAsync(string id)
    {
        await JsRuntime.InvokeAsync<object>("scrollToElementId", id);
    }

    private async Task<string> SanitizeAsync(string src)
    {
        return await JsRuntime.InvokeAsync<string>("filterXSS", src);
    }

    private async Task MoveCommentBoxAsync(Guid? id = null)
    {
        await JsRuntime.InvokeAsync<object>("moveCommentBox", id);
    }

    private async Task<string> GetEditorValueAsync(string id)
    {
        return await JsRuntime.InvokeAsync<string>("getSmdeValue", id);
    }

    private async Task ClearEditorValueAsync(string id)
    {
        await JsRuntime.InvokeAsync<object>("clearSmdeValue", id);
    }

    private async Task HighlightAsync()
    {
        await JsRuntime.InvokeAsync<object>("Highlight");
    }

    private async Task<IEnumerable<CommentViewModel>> RenderCommentsMarkdownAsync(IEnumerable<CommentViewModel> comments)
    {
        foreach (var x in comments)
        {
            if (x.IsOwner)
            {
                x.Content = Instance.Parse(x.Content);
            }
            else
            {
                x.Content = await SanitizeAsync(Instance.Parse(x.Content));
            }

            if (x.InnerComments != null)
            {
                await RenderCommentsMarkdownAsync(x.InnerComments);
            }
        }

        return comments;
    }

    private int CountComment(IEnumerable<CommentViewModel> src, bool isSecondLevel = false)
    {
        if (src == null)
        {
            return 0;
        }
        if (isSecondLevel)
        {
            return src.Count();
        }
        else
        {
            return src.Count() + src.Select(x => CountComment(x.InnerComments, true)).Sum();
        }
    }
}